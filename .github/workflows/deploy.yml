name: Deploy to Compute Engine

on:
  push:
    branches:
      - main  # Deploy when pushing to main branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Create temporary env file
        id: load-env
        run: |
          # Create and load env vars from DEPLOY_ENV_VARS
          if [ -n "${{ secrets.DEPLOY_ENV_VARS }}" ]; then
            echo "${{ secrets.DEPLOY_ENV_VARS }}" > .env.temp
            # Export variables for this step
            export $(grep -v '^#' .env.temp | xargs)
            # Persist into Actions environment
            echo "DB_USER=$DB_USER" >> $GITHUB_ENV
            echo "DB_HOST=$DB_HOST" >> $GITHUB_ENV
            echo "DB_NAME=$DB_NAME" >> $GITHUB_ENV
            echo "GCP_PROJECT_ID=$GCP_PROJECT_ID" >> $GITHUB_ENV
          fi

      - name: Configure Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure gcloud CLI
        run: |
          # Set the active GCP project for gcloud CLI
          gcloud config set project ${{ env.GCP_PROJECT_ID }}

      - name: Get DB Password
        id: get-secret
        run: |
          DB_PASSWORD=$(gcloud secrets versions access latest --secret=notivus-db-password)
          echo "DB_PASSWORD=$DB_PASSWORD" >> $GITHUB_ENV

      - name: Create .env file
        run: |
          # Initialize .env with DEPLOY_ENV_VARS contents if present
          if [ -f .env.temp ]; then
            cat .env.temp > .env
          else
            > .env
          fi

          # Append the database connection string without printing variable values
          printf 'DATABASE_URL=postgresql://%s:%s@%s:5432/%s\n' \
            "$DB_USER" "$DB_PASSWORD" "$DB_HOST" "$DB_NAME" >> .env

          # Clean up temporary file
          rm -f .env.temp

      - name: Deploy to Compute Engine
        run: |
          # Ensure the target directory exists (connect as debian user)
          gcloud compute ssh debian@notivus-app --zone=us-central1-a --command="mkdir -p /home/debian/notivus"
          # Copy project files
          gcloud compute scp --recurse ./ debian@notivus-app:/home/debian/notivus --zone=us-central1-a
          # Copy .env file
          gcloud compute scp .env debian@notivus-app:/home/debian/notivus/.env --zone=us-central1-a
          # SSH in to install deps, build and restart
          gcloud compute ssh debian@notivus-app --zone=us-central1-a --command='
            cd /home/debian/notivus
            npm ci
            npm run build
            # Start or restart the app under PM2, updating env on restart
            pm2 describe notivus-app >/dev/null 2>&1 \
              && pm2 restart notivus-app --update-env \
              || pm2 start npm --name notivus-app -- run start
          ' 